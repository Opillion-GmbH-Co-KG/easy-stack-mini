services:

  mysql:
    hostname: mysql
    build:
      context: .docker/${DOCKER_IMAGE_SOURCE}/
      dockerfile: mysql.Dockerfile
      args:
        DOCKER_REPO: ${DOCKER_REPO}
        BASE_IMAGE_TAG: ${BASE_IMAGE_TAG}
        DEV_IMAGE_TAG: ${DEV_IMAGE_TAG}
        PROD_IMAGE_TAG: ${PROD_IMAGE_TAG}
    restart: unless-stopped
    ports:
      - "${MYSQL_EXTERNAL_PORT}:${MYSQL_INTERNAL_PORT}" # "33065:3305"
    command: >
      --init-file /etc/mysql/init-raw.sql && \
      mysqld --user=${DATABASE_USER}
    volumes:
      - mysql-data:/var/lib/mysql
    environment:
      DATABASE_USER: ${DATABASE_USER}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_NAME: ${DATABASE_NAME}
      DATABASE_TEST_NAME: ${DATABASE_TEST_NAME}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${DATABASE_PASSWORD}
      MYSQL_TCP_PORT: ${MYSQL_TCP_PORT}
    healthcheck:
      test: "mysql -uroot -p$MYSQL_ROOT_PASSWORD ${DATABASE_NAME} -e 'select 1'"
      interval: 6s
      timeout: 10s
      retries: 10
      start_period: 11s
    networks:
      - default

  maria:
    hostname: maria
    build:
      context: .docker/${DOCKER_IMAGE_SOURCE}/
      dockerfile: maria.Dockerfile
      args:
        DOCKER_REPO: ${DOCKER_REPO}
        BASE_IMAGE_TAG: ${BASE_IMAGE_TAG}
        DEV_IMAGE_TAG: ${DEV_IMAGE_TAG}
        PROD_IMAGE_TAG: ${PROD_IMAGE_TAG}
    ports:
      - "${MARIA_EXTERNAL_PORT}:${MARIA_INTERNAL_PORT}"  # "33067:3306"
    restart: unless-stopped
    stop_grace_period: 5s
    security_opt:
      - seccomp:unconfined
      - apparmor:unconfined
    command: >
      --init-file /etc/mariadb/init.sql && \
      --innodb-buffer-pool-size=512M --transaction-isolation=READ-COMMITTED \
      --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci \
      --max-connections=512 --innodb-rollback-on-timeout=OFF --innodb-lock-wait-timeout=120
    environment:
      MARIADB_AUTO_UPGRADE: ${MARIADB_AUTO_UPGRADE}
      MARIADB_INITDB_SKIP_TZINFO: ${MARIADB_INITDB_SKIP_TZINFO}
      MARIADB_TCP_PORT: ${MARIADB_TCP_PORT}
      MARIADB_DATABASE: ${MARIADB_DATABASE}
      MARIADB_USER: ${DATABASE_MARIA_USER}
      MARIADB_PASSWORD: ${DATABASE_MARIA_PASSWORD}
      MARIADB_ROOT_PASSWORD: ${DATABASE_MARIA_PASSWORD}
    volumes:
      - ./.docker/dev/maria/database:/var/lib/mysql
    healthcheck:
      test: [ "CMD", "healthcheck.sh", "--su-mysql", "--connect", "--innodb_initialized" ]
      interval: 16s
      timeout: 10s
      retries: 3
      start_period: 11s
    networks:
      - default


  redis:
    hostname: redis
    build:
      context: .docker/${DOCKER_IMAGE_SOURCE}/
      dockerfile: redis.Dockerfile
      args:
        DOCKER_REPO: ${DOCKER_REPO}
        BASE_IMAGE_TAG: ${BASE_IMAGE_TAG}
        DEV_IMAGE_TAG: ${DEV_IMAGE_TAG}
        PROD_IMAGE_TAG: ${PROD_IMAGE_TAG}
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_USERNAME: ${REDIS_USERNAME}
    expose:
      - "${REDIS_INTERNAL_PORT}" #"6379"
      - "${REDIS_INTERNAL_TWO_PORT}" #"9121"
    volumes:
      - redis-data:/data
    command: /bin/sh -cx "echo 'requirepass $REDIS_PASSWORD' | redis-server /usr/local/etc/redis/redis.conf --requirepass root"
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "6379", "-c", "ping"]
      interval: 16s
      timeout: 10s
      retries: 3
      start_period: 11s
    networks:
      - default


  elasticsearch:
    hostname: elasticsearch
    build:
      context: .docker/${DOCKER_IMAGE_SOURCE}/
      dockerfile: elasticsearch.Dockerfile
      args:
        DOCKER_REPO: ${DOCKER_REPO}
        BASE_IMAGE_TAG: ${BASE_IMAGE_TAG}
        DEV_IMAGE_TAG: ${DEV_IMAGE_TAG}
        PROD_IMAGE_TAG: ${PROD_IMAGE_TAG}
    ports:
      - "${ELASTIC_EXTERNAL_PORT}:${ELASTIC_INTERNAL_PORT}" # "9200:9200"
    environment:
      CLI_JAVA_OPTS: -Xms2g -Xmx2g
      bootstrap.memory_lock: true
      discovery.type: single-node
      xpack.security.enabled: false
      xpack.security.enrollment.enabled: false
      cluster.name: docker-cluster
      cluster.routing.allocation.disk.threshold_enabled: false
      http.host: 0.0.0.0
      transport.host: localhost
      network.host: 0.0.0.0
      ES_JAVA_OPTS: -XX:UseAVX=2 -Dlog4j2.formatMsgNoLookups=true -Xms1g -Xmx1g
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
    volumes:
      - elastic-data:/usr/share/elasticsearch/data
    healthcheck:
      interval: 20s
      retries: 10
      test: ["CMD-SHELL", "curl -s http://elasticsearch:${ELASTIC_INTERNAL_PORT}/_cluster/health | grep -vq '\"status\":\"red\"'"]
    networks:
      - default


  minio:
    hostname: minio
    build:
      context: .docker/${DOCKER_IMAGE_SOURCE}/
      dockerfile: minio.Dockerfile
      args:
        DOCKER_REPO: ${DOCKER_REPO}
        BASE_IMAGE_TAG: ${BASE_IMAGE_TAG}
        DEV_IMAGE_TAG: ${DEV_IMAGE_TAG}
        PROD_IMAGE_TAG: ${PROD_IMAGE_TAG}
    ports:
      - "${MINIO_EXTERNAL_PORT_ONE}:${MINIO_INTERNAL_PORT_ONE}" # "9006:9006"
      - "${MINIO_EXTERNAL_PORT_TWO}:${MINIO_INTERNAL_PORT_TWO}" # "9007:9007"
    volumes:
      - minio-data:/bitnami/minio/data
      #- ./.docker/dev/minio/data:/bitnami/minio/data
    command: ["/bin/sh", "-c", "/usr/bin/create-access-key.sh & /opt/bitnami/scripts/minio/run.sh"]
    environment:
      MINIO_SERVER_URL: ${MINIO_HOST_URL}
      MINIO_HOST_URL: ${MINIO_HOST_URL}
      MINIO_SERVER_URL_ONE: ${MINIO_SERVER_URL_ONE}
      MINIO_SERVER_URL_TWO: ${MINIO_SERVER_URL_TWO}
      BITNAMI_DEBUG: true
      MINIO_API_PORT_NUMBER: ${MINIO_INTERNAL_PORT_ONE}
      MINIO_CONSOLE_PORT_NUMBER: ${MINIO_INTERNAL_PORT_TWO}
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_DATA_DIR: ${MINIO_DATA_DIR}
      MINIO_DEFAULT_BUCKETS: ${MINIO_DEFAULT_BUCKETS}
      MINIO_SERVER_ACCESS_KEY: ${MINIO_SERVER_ACCESS_KEY}
      MINIO_SERVER_SECRET_KEY: ${MINIO_SERVER_SECRET_KEY}
      MINIO_PROMETHEUS_AUTH_TYPE: public
    healthcheck:
      test: ["CMD-SHELL", "curl -f ${MINIO_SERVER_URL_ONE}/minio/health/live || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - default


  postgres:
    hostname: postgres
    build:
      context: .docker/${DOCKER_IMAGE_SOURCE}/
      dockerfile: postgres.Dockerfile
      args:
        DOCKER_REPO: ${DOCKER_REPO}
        BASE_IMAGE_TAG: ${BASE_IMAGE_TAG}
        DEV_IMAGE_TAG: ${DEV_IMAGE_TAG}
        PROD_IMAGE_TAG: ${PROD_IMAGE_TAG}
    ports:
      - "${POSTGRES_EXTERNAL_PORT}:${POSTGRES_INTERNAL_PORT}" # "5432:5432"
    volumes:
      - ./.docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
      - postgres-data:/var/lib/postgresql/data
    environment:
      PGDATA: ${PGDATA}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER_ROOT_PASSWORD: ${POSTGRES_USER_ROOT_PASSWORD}
      POSTGRES_USER_PASSWORD: ${POSTGRES_USER_PASSWORD}
      SERVICE_NAME: ${SERVICE_NAME}
      POSTGRES_MULTIPLE_DATABASES: ${POSTGRES_MULTIPLE_DATABASES}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - default


  postgres-admin:
    hostname: postgres-admin
    build:
      context: .docker/${DOCKER_IMAGE_SOURCE}/
      dockerfile: postgres.admin.Dockerfile
      args:
        DOCKER_REPO: ${DOCKER_REPO}
        BASE_IMAGE_TAG: ${BASE_IMAGE_TAG}
        DEV_IMAGE_TAG: ${DEV_IMAGE_TAG}
        PROD_IMAGE_TAG: ${PROD_IMAGE_TAG}
    ports:
      - "${PGADMIN_EXTERNAL_PORT}:${PGADMIN_INTERNAL_PORT}" # "8081:8081"
    volumes:
      - pgadmin-data:/var/lib/postgresql/data
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_LISTEN_ADDRESS: ${PGADMIN_LISTEN_ADDRESS}
      PGADMIN_LISTEN_PORT: ${PGADMIN_LISTEN_PORT}
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:${PGADMIN_INTERNAL_PORT} || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - default


  bitwarden:
    hostname: bitwarden
    build:
      context: .docker/${DOCKER_IMAGE_SOURCE}/
      dockerfile: bitwarden.Dockerfile
      args:
        DOCKER_REPO: ${DOCKER_REPO}
        BASE_IMAGE_TAG: ${BASE_IMAGE_TAG}
        DEV_IMAGE_TAG: ${DEV_IMAGE_TAG}
        PROD_IMAGE_TAG: ${PROD_IMAGE_TAG}
    environment:
      DATABASE_URL: "mysql://${DATABASE_USER}:${DATABASE_PASSWORD}@${DATABASE_HOST}:${MYSQL_INTERNAL_PORT}/${DATABASE_BITWARDEN}"
      ROCKET_ADDRESS: ${ROCKET_ADDRESS}
      ROCKET_PORT: ${BITWARDEN_INTERNAL_PORT}
      HTTP_LOCALHOST: ${HTTP_LOCALHOST}
      I_REALLY_WANT_VOLATILE_STORAGE: ${BITWARDEN_I_REALLY_WANT_VOLATILE_STORAGE}
      WEBSOCKET_ENABLED: ${BITWARDEN_WEBSOCKET_ENABLED}
      SHOW_PASSWORD_HINT: ${BITWARDEN_SHOW_PASSWORD_HINT}
      ADMIN_TOKEN: ${BITWARDEN_ADMIN_TOKEN}
      BW_CLIENTID: ${BITWARDEN_CLIENTID}
      BW_CLIENTSECRET: ${BITWARDEN_CLIENTSECRET}
      BITWARDEN_USER: ${BITWARDEN_USER}
      BITWARDEN_PW: ${BITWARDEN_PW}
      LOG_LEVEL: debug
      # Mail Handling
      # SMTP_HOST: ${BITWARDEN_SMTP_HOST}
      # SMTP_FROM: ${BITWARDEN_SMTP_FROM}
      # SMTP_FROM_NAME: ${BITWARDEN_SMTP_FROM_NAME}
      # SMTP_SECURITY: ${BITWARDEN_SMTP_SECURITY}
      # SMTP_PORT: ${BITWARDEN_SMTP_PORT}
      # SMTP_USERNAME: ${BITWARDEN_SMTP_USERNAME}
      # SMTP_PASSWORD: ${BITWARDEN_SMTP_PASSWORD}
      # SMTP_TIMEOUT: ${BITWARDEN_SMTP_TIMEOUT}
      # SMTP_AUTH_MECHANISM: ${BITWARDEN_SMTP_AUTH_MECHANISM}
      # LOGIN_RATELIMIT_MAX_BURST: ${BITWARDEN_LOGIN_RATELIMIT_MAX_BURST}
      # LOGIN_RATELIMIT_SECONDS: ${BITWARDEN_LOGIN_RATELIMIT_SECONDS}
      # DOMAIN: ${BITWARDEN_DOMAIN}
      # INVITATION_ORG_NAME: ${BITWARDEN_INVITATION_ORG_NAME}
      # INVITATIONS_ALLOWED: ${BITWARDEN_INVITATIONS_ALLOWED}
      # SIGNUPS_ALLOWED: ${BITWARDEN_SIGNUPS_ALLOWED}
      # SIGNUPS_DOMAINS_WHITELIST: ${BITWARDEN_SIGNUPS_DOMAINS_WHITELIST}
      # SIGNUPS_VERIFY: ${BITWARDEN_SIGNUPS_VERIFY}
      # SIGNUPS_VERIFY_RESEND_TIME: ${BITWARDEN_SIGNUPS_VERIFY_RESEND_TIME}
      # SIGNUPS_VERIFY_RESEND_LIMIT: ${BITWARDEN_SIGNUPS_VERIFY_RESEND_LIMIT}
      # EMERGENCY_ACCESS_ALLOWED: ${BITWARDEN_EMERGENCY_ACCESS_ALLOWED}
      # SENDS_ALLOWED: ${BITWARDEN_SENDS_ALLOWED}
      # WEB_VAULT_ENABLED: ${BITWARDEN_WEB_VAULT_ENABLED}
    restart: unless-stopped
    ports:
      - "${BITWARDEN_EXTERNAL_PORT}:${BITWARDEN_INTERNAL_PORT}" # "8084:86"
    volumes:
      - ./.docker/dev/bitwarden/data:/bwdata
      - ./.docker/dev/bitwarden/Makefile:/Makefile:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "${HTTP_LOCALHOST}:${BITWARDEN_INTERNAL_PORT}"]
      interval: 16s
      timeout: 10s
      retries: 10
      start_period: 30s
    networks:
      - default

  mssql:
    hostname: mssql
    build:
      context: .docker/${DOCKER_IMAGE_SOURCE}/
      dockerfile: mssql.Dockerfile
      args:
        DOCKER_REPO: ${DOCKER_REPO}
        BASE_IMAGE_TAG: ${BASE_IMAGE_TAG}
        DEV_IMAGE_TAG: ${DEV_IMAGE_TAG}
        PROD_IMAGE_TAG: ${PROD_IMAGE_TAG}
    restart: unless-stopped
    ports:
      - "${MSSQL_EXTERNAL_PORT}:${MSSQL_INTERNAL_PORT}" # "1433:1433"
    environment:
      ACCEPT_EULA: ${ACCEPT_EULA}
      SA_PASSWORD: ${SA_PASSWORD}
    volumes:
      - ./.docker/dev/mssql/scripts:/usr/scripts
      - mssql_data:/var/opt/mssql
    command: ["bash", "/usr/sbin/configure-db.sh"]
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep sqlservr | grep -v grep"]
      interval: 16s
      timeout: 10s
      retries: 10
      start_period: 30s
    networks:
      - default


  oracle:
    hostname: oracle
    build:
      context: .docker/${DOCKER_IMAGE_SOURCE}/
      dockerfile: oracle.Dockerfile
      args:
        DOCKER_REPO: ${DOCKER_REPO}
        BASE_IMAGE_TAG: ${BASE_IMAGE_TAG}
        DEV_IMAGE_TAG: ${DEV_IMAGE_TAG}
        PROD_IMAGE_TAG: ${PROD_IMAGE_TAG}
    ports:
      - "${ORACLE_EXTERNAL_PORT}:${ORACLE__INTERNAL_PORT}"
    environment:
      HOSTNAME: oracle
      ORACLE_PASSWORD: ${ORACLE_PASSWORD}
      APP_USER: ${APP_USER}
      APP_USER_PASSWORD: ${APP_USER_PASSWORD}
    volumes:
      - ./.docker/dev/oracle:/container-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "healthcheck.sh"]
      interval: 16s
      timeout: 10s
      retries: 10
      start_period: 30s
    networks:
      - default


volumes:
  mysql-data:
  redis-data:
  elastic-data:
  mssql_data:
  postgres-data:
  minio-data:
  pgadmin-data:



networks:
  default:
    name: ${DOCKER_NETWORK}
    driver: bridge


  
